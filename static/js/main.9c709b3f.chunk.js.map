{"version":3,"sources":["Results.js","Scoreboard.js","ImgResults.js","App.js","serviceWorker.js","index.js"],"names":["Results","youWon","this","props","winner","computerWon","userChoice","computerChoice","React","Component","Scoreboard","id","userScore","computerScore","ImgResults","playerChoice","src","alt","App","state","getUserChoice","bind","getComputerChoice","setState","compChoice","defineWinner","Math","floor","random","nextWinner","nextUserScore","nextCompScore","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9c709b3f.chunk.js","sourcesContent":["import React from 'react';\n\nexport class Results extends React.Component {\n\n\n  render() {\n    const youWon = this.props.winner === 'You';\n    const computerWon = this.props.winner === 'Computer';\n    \n    return (\n    <div>\n      <p>You chose {this.props.userChoice}</p>\n      <p>The computer chose {this.props.computerChoice}</p>\n      {youWon && (\n        <p>{this.props.winner} win!</p> )}\n      {computerWon && (\n        <p>{this.props.winner} wins :(</p> )}\n      {!youWon && !computerWon && (\n        <p>It's a tie</p>\n      )}\n    </div>\n    )\n  }\n}","import React from 'react';\n\nexport class Scoreboard extends React.Component {\n  render() {\n    return (\n    <>\n      <h2>Scoreboard</h2>\n      <table>\n        <tbody>\n          <tr>\n            <td>User Score</td>\n            <td>Computer Score</td>\n          </tr>\n          <tr>\n            <td id=\"userScore\">{this.props.userScore}</td>\n            <td id=\"computerScore\">{this.props.computerScore}</td>\n          </tr>\n        </tbody>\n    </table>  \n    </>\n    )\n  }\n}\n","import React from 'react';\n\nexport class ImgResults extends React.Component {\n  render() {\n    if (this.props.playerChoice === 'rock'){\n      return <img src=\"img/piedra.png\" alt=\"piedra\" id=\"piedra\"></img>\n    } else if (this.props.playerChoice === 'paper'){\n      return <img src=\"img/papel.png\" alt=\"papel\"></img>\n    } else if (this.props.playerChoice === 'scissors') {\n      return <img src=\"img/tijera.png\" alt=\"tijera\" id=\"tijera\"></img>\n    } else {\n      return null;\n    }\n  }\n}\n\n","import React from 'react';\nimport './App.css';\nimport { Results } from './Results';\nimport { Scoreboard } from './Scoreboard';\nimport { ImgResults } from './ImgResults';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      userScore: 0,\n      computerScore: 0,\n      userChoice: '',\n      computerChoice: '',\n      winner:''\n    }\n    this.getUserChoice = this.getUserChoice.bind(this);\n    this.getComputerChoice = this.getComputerChoice.bind(this);\n  }\n\n  getUserChoice(userChoice){\n    this.setState({userChoice:userChoice})\n    const compChoice = this.getComputerChoice()\n    this.defineWinner(userChoice, compChoice)\n  }\n\n  getComputerChoice(){\n    const possibleComputerChoices = [\"rock\", \"paper\", \"scissors\"];\n    const randomNumber = Math.floor(Math.random() * 3);\n    let compChoice = possibleComputerChoices[randomNumber];\n    \n    this.setState({computerChoice:compChoice})\n    return compChoice;\n  }\n\n  defineWinner(userChoice, compChoice) {\n    let nextUserScore = this.state.userScore;\n    let nextCompScore = this.state.computerScore;\n    let nextWinner;\n\n    if (userChoice === compChoice) {\n    } else if (userChoice === 'rock') {\n      if (compChoice === 'paper'){\n        nextCompScore +=1;\n        nextWinner = 'Computer'\n      } else {\n        nextUserScore +=1;\n        nextWinner = 'You'\n      }\n    } else if (userChoice ==='paper') {\n      if (compChoice === 'rock') {\n        nextUserScore +=1;\n        nextWinner = 'You'\n      } else {\n        nextCompScore +=1;        \n        nextWinner = 'Computer'\n      }\n    } else if (userChoice === 'scissors') {\n      if (compChoice === 'rock') {\n        nextCompScore +=1;\n        nextWinner = 'Computer'\n      } else {\n        nextCompScore +=1;\n        nextWinner = 'You'\n      }\n    }\n    this.setState({\n      userScore:nextUserScore,\n      computerScore:nextCompScore,\n      winner:nextWinner\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"wrap\">\n        <h1>Rock, Paper or Scissors</h1>\n          <p>Make your choice: rock beats scissors, scissors beats paper and paper beats rock.</p>\n        {/* JSON.stringify(this.state) */} \n \n          {/*this.state.userChoice === '' ? (\n            <img src=\"img/piedra-papel-tijeras.png\"/>\n          ) : (null)*/}\n\n            {this.state.userChoice === '' && (\n              <div className=\"img-space\">\n                <img src=\"img/piedra-papel-tijeras.png\" alt=\"tijeras\"/>\n              </div>\n            )}\n          \n          <ImgResults playerChoice={this.state.userChoice}/>\n          <ImgResults playerChoice={this.state.computerChoice}/>\n          \n          {this.state.userChoice !== '' && (\n          <Results userChoice={this.state.userChoice}\n            computerChoice={this.state.computerChoice}\n            winner={this.state.winner}\n            />\n          )}\n\n\n          <div className=\"score-board\">\n            <Scoreboard userScore={this.state.userScore}\n              computerScore={this.state.computerScore}\n            />\n          </div>\n          \n          <div className=\"btns-div\">\n            <button className=\"rock\" onClick={() => this.getUserChoice(\"rock\")}>Rock</button>\n            <button className=\"paper\" onClick={() => this.getUserChoice(\"paper\")}>Paper </button>\n            <button className=\"scissors\" onClick={() => this.getUserChoice(\"scissors\")}>Scissors</button>\n          </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}